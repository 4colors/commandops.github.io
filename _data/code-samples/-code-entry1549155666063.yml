_id: 2f06df70-274f-11e9-a182-47c863e1b925
author: whicker
notes: >-
  Working code for creating random bios and false contacts using 4 RP's in a
  rectangle.  You can pass in the spacing and some jitter to make it less of a
  perfect grid and control how close together the units are.  The script will
  set up a sea control patrol for the bios to be in if it does not exist. You
  need to set up a side called 'Biologics' set to computer only and Blind
  awareness.
code: "-- creates random bios and false contact based on units in the bio_DBID table. 92 is in there twice to make it more likely a bio is chosen than a false contact\r\n-- The script takes in 4 Reference Points that should be in the shape of a rectangle, the goal is to evenly distrbute contacts through out the area\r\n-- if the location for a unit is below the minDepth then a placeholder Cessna is put there and then removed at the end\r\n-- the previous unit placed determines where the current unit goes. Same thing happens at the start, first unit is a Cessna that will be deleted.\r\n-- The script will create a sea control mission from the 4 RPs (with a unique name that includes the top to RP's). \r\n--If you run it more than once with the same RP's it will use the existing mission\r\n\r\n-- user config stuff:\r\nTool_EmulateNoConsole(true) -- this is needed in the console due to the mission check, if you need to debug you should comment the GetMission bits in the randomBios function. \r\nbio_DBIDs = { 92, 92,355,354,93,94,95 } --list of units to choose from - fish and false contacts\r\nbioUnitsToDelete = {} -- create an empty table to store placeholders used when depth is too shallow\r\nlocal side = 'Biologics' --you need a side named Biologics, set to computer only and awareness set to blind. Please create this before running.\r\nlocal topLeftPoint = 'RP-2954' --the four RP's that make up your rectangle, starting at top left\r\nlocal topRightPoint = 'RP-2955'\r\nlocal bottomRightPoint = 'RP-2956' --careful, we are going clockwise\r\nlocal bottomLeftPoint = 'RP-2957'\r\nlocal spacingInMiles = 90 -- how far apart should we spread them?\r\nlocal minDepth = -40 -- min depth to place a unit\r\nlocal distanceJitter = 10 -- varies the distance between units so it is not a perfect grid\r\nlocal angleJitter =5 -- varies the angle used to place units so it is not a perfect grid\r\n-- see very bottom for where we actually use the info above to call the main function (there are 2 used).\r\n\r\n--there are 2 functions, this function is called by the function below multiple times - you do not use this function on its own (normally)\r\nfunction placeRandomBiologic(side,unit,distance,distanceJitter,angle,angleJitter,minDepth, mission) -- main code to create the unit, called at the bottom\r\n--math.randomseed(os.time()) --should uncomment this if it is in an event. Comment it out if running in the console.\r\nlocal u = ScenEdit_GetUnit({guid=unit})\r\n--print(u)\r\nif u ~= nil then\r\n  local m = math.random(distance-distanceJitter,distance+distanceJitter) -- get random distance based on jitter\r\n  local b = math.random(angle-angleJitter,angle+angleJitter) -- get random angle based on jitter\r\n  local point = ScenEdit_AddReferencePoint( {side=side, name=\"possible\", RelativeTo=unit, bearing=b ,distance=m}) -- create a reference point relative to unit passed in\r\n  ScenEdit_DeleteReferencePoint({side=side, name =\"possible\"})  --delete the point itself, we just need the corridinates\r\n  local elevation = World_GetElevation({latitude = point.latitude, longitude= point.longitude}) --get the elevation of the point\r\n  --print(elevation) \r\n        if elevation < minDepth then -- check to see if we passed the check, can repurpose elevation if so\r\n            if elevation < -300 then elevation = -300 --don't go too deep, want to use this for random depth as well so changing it to -300m if it is deeper\r\n            end\r\n        rDepth = math.random(40,-elevation) --choose random depth between 40 and the elevation (which is limited to -300) to use for new units depth\r\n        --print(rDepth)\r\n        DBID = bio_DBIDs[math.random( 1, #bio_DBIDs)] --choose a random unit from the list\r\n        local new_bio = ScenEdit_AddUnit({side='Biologics', type='Submarine',name='Biologic/False Contact', dbid=DBID,latitude=point.latitude,longitude=point.longitude, \r\n        manualAltitude= -rDepth, depth = rDepth}) --create new unit\r\n            if DBID == 92 or DBID == 355 or DBID == 354 then --if it is bio then assign to mission and give random speed\r\n            new_bio.manualSpeed=math.random(0, 4)\r\n            ScenEdit_AssignUnitToMission( new_bio.guid, mission)   \r\n            --print(DBID)\r\n            end -- end dbid check  \r\n        return new_bio--exit, we are done, passback unit wrapper to where it was called to use on next iteration\r\n\r\n        else --if not deep enough then place an AC as a marker so we have something to return for next pass\r\n        local unitToDelete = ScenEdit_AddUnit({side='Biologics', type='Aircraft',name='AC Holder to be deleted', dbid=1571, loadoutid = 8397,latitude=point.latitude,longitude=point.longitude, altitude = 5000}) \r\n        table.insert(bioUnitsToDelete, unitToDelete.guid) -- add the unitToDelete to the list of units to delete, will delete at the end      \r\n        return unitToDelete --exit, we are done, passback unit wrapper to where it was called to use on next iteration  \r\n        end --end elevation if\r\n\r\n else -- if unit check fails\r\nprint('unit does not exist')\r\nend --end unit check\r\nend --end function\r\n\r\n-- this is the function you actually call (below - functions always load first)\r\nfunction randomBios(side,topLeftPoint,topRightPoint,bottomRightPoint,bottomLeftPoint,spacingInMiles,minDepth,distanceJitter,angleJitter)\r\nlocal mission = ScenEdit_GetMission(side, 'Biologics '..topLeftPoint..'-'..topRightPoint) -- first check to see if mission exists\r\nif mission == nil then --if mission does not exist create it\r\nmission = ScenEdit_AddMission(side, 'Biologics '..topLeftPoint..'-'..topRightPoint, 'patrol', {type= 'SEA'})\r\nmission = ScenEdit_SetMission('Biologics', 'Biologics '..topLeftPoint..'-'..topRightPoint, {patrolzone={topLeftPoint,topRightPoint, bottomRightPoint, bottomLeftPoint}, onethirdrule=false })\r\nend -- end mission check\r\nlocal spacingInMiles1 = 0 --first time thru you don't offset\r\nlocal rowAngle =  90 --angle to use for bearing of new unit\r\nlocal rowAngleReverse = 180 -- each row reverses the angle so this will be added to 90 = 270\r\ntopLeftPoint = ScenEdit_GetReferencePoint({side=side, name=topLeftPoint})\r\ntopRightPoint = ScenEdit_GetReferencePoint({side=side, name=topRightPoint})\r\nbottomLeftPoint = ScenEdit_GetReferencePoint({side=side, name=bottomLeftPoint})\r\n-- don't need bottom right, we're just measuring the width and height from first RP\r\nlocal width = Tool_Range({latitude = topLeftPoint.latitude, longitude=topLeftPoint.longitude},{latitude =topRightPoint.latitude, longitude=topRightPoint.longitude})\r\nlocal height = Tool_Range({latitude = topLeftPoint.latitude, longitude=topLeftPoint.longitude},{latitude =bottomLeftPoint.latitude, longitude=bottomLeftPoint.longitude})\r\n--print(width)\r\n--print(height)\r\nlocal rows = math.floor(height/spacingInMiles) --divide height by spacing specified in setup, this gives us the number of iterations to do in one loop\r\n--print('Rows: '..rows)\r\nlocal columns = math.floor(width/spacingInMiles) --divide width by spacing specified in setup, this gives us the number of iterations to do in the other loop\r\n--print('Columns: '..columns)\r\nlocal unit = ScenEdit_AddUnit({side=side, type='Aircraft',name='AC Holder to be deleted', dbid=1571, loadoutid = 8397,latitude=topLeftPoint.latitude,longitude=topLeftPoint.longitude, altitude = 5000, mission.name}) \r\n        table.insert(bioUnitsToDelete, unit.guid) --need an initial unit to start process, using a Cessna, will delete later\r\nlocal unitguid = unit.guid \r\n--unitguid is what we use to create every unit, so we set it to the previous unit after every iteration, so that the next unit can use the previous units position as a starting point\r\nfor i = 1,rows do --this gets complicated, we have an outer loop to go across (?)\r\n   local newBio = placeRandomBiologic('Biologics',unitguid,spacingInMiles1, distanceJitter, 180, angleJitter, minDepth, mission.name) --call the function, will return the created unit\r\n    unitguid = newBio.guid --change unitguid to newly created unit for next pass\r\n    spacingInMiles1 = spacingInMiles --after first use, reset the spacing to what it should be (was 0 on first unit)\r\n    for i = 1,columns do --inner loop to go down\r\n        local newBio = placeRandomBiologic('Biologics',unitguid,spacingInMiles, distanceJitter, rowAngle, angleJitter, minDepth, mission.name) -- call the function, will return the created units\r\n        unitguid = newBio.guid --change unitguid to newly created unit for next pass\r\n    end -- rows loop\r\n      rowAngle = rowAngle + rowAngleReverse --we are done with one row (?) which was going to the right, now we need to come back and go to the left, otherwise it just keeps going to the right \r\n      rowAngleReverse = -rowAngleReverse -- if we go from 90 to 270 you can't add 180 again or you are past 360, so you need to subtract 180 next time\r\nend -- columns loop\r\n--print(#bioUnitsToDelete)\r\nfor i = 1, #bioUnitsToDelete do -- we are done creating units, need to delete any placeholder Cessnas \r\nlocal guidToDelete = bioUnitsToDelete[i]\r\nScenEdit_DeleteUnit({guid = guidToDelete})\r\nend --end loop to delete \r\n--print(bioUnitsToDelete)\r\nend --end function\r\n\r\n-- call the main function with the arguments set at the top:\r\nrandomBios(side,topLeftPoint,topRightPoint,bottomRightPoint,bottomLeftPoint,spacingInMiles,minDepth,distanceJitter,angleJitter)"
date: 1549155666
